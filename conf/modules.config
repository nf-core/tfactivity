/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/all/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: '.*:PREPARE_GENOME:EXTRACT_ID_SYMBOL_MAP' {
        ext.args = "-l \"gene_id,gene_name\""
    }

    withName: CLEAN_BED {
        ext.args = {"'{print \$1 \"\\t\" \$2 \"\\t\" \$3 \"\\t\" \$4 \"\\t\" \$5 \"\\t\" \$6}'"}
        ext.prefix = {"${meta.id}.clean"}
        ext.suffix = "bed"
    }

    withName: FILTER_CONVERT_GTF {
        ext.args = {"'BEGIN {OFS = \"\\t\"} \$3 == \"transcript\" {print \$1, \$4-1, \$4, \$1 \":\" \$4-1 \"-\" \$4, \$6, \$7}'"}
        ext.suffix = "bed"
    }

    withName: SORT_BED {
        ext.args = "-V -k1,1 -k2,2n"
        ext.prefix = {"${meta.id}_sorted"}
        ext.suffix = "bed"
    }

    withName: SORT_CHROM_SIZES {
        ext.args = "-V -k1,1 -k2,2n"
        ext.prefix = {"${meta.id}_sorted"}
        ext.suffix = "fa.fai"
    }

    withName: CONSTRUCT_TSS {
        ext.args = "-b ${params.rose_tss_window}"
        ext.prefix = "tss"
    }

    withName: FILTER_PREDICTIONS {
        ext.args = "-A -f 1"
        ext.prefix = {"${meta.id}_filtered"}
    }

    withName: STITCHING {
        ext.args = "-d ${params.rose_stitching_window}"
        ext.prefix = {"${meta.id}_stitched"}
    }

    withName: TSS_OVERLAP {
        ext.args = "-c"
        ext.prefix = {"${meta.id}_tss-overlap-counts"}
    }

    withName: FILTER_OVERLAPS {
        ext.args = {"'BEGIN {OFS = \"\\t\"} \$NF >= 2 {print \$1, \$2, \$3}'"}
        ext.prefix = {"${meta.id}_overlap"}
    }

    withName: UNSTITCHED_REGIONS {
        ext.args = "-F 1"
        ext.prefix = {"${meta.id}_original_regions"}
    }

    withName: CONCAT_AND_SORT {
        ext.args = "-k1,1 -k2,2n"
        ext.suffix = "bed"
    }

    withName: ".*:ROSE:CONCAT_AND_SORT" {
        ext.prefix = {"${meta.id}_stitched"}
    }

    withName: ".*:FIMO:ADD_MISSING_COLUMNS" {
        ext.args = "'BEGIN {OFS = \"\\t\"} {for (i = 1; i <= 6; i++) if (\$i == \"\") \$i = \".\"; print \$1, \$2, \$3, \$4, \$5, \$6}'"
        ext.prefix = {"${meta.id}_unified"}
    }

    withName: ".*:FIMO:CONCAT_AND_SORT" {
        ext.prefix = {"${meta.id}_sorted"}
    }

    withName: BEDTOOLS_SORT {
        ext.prefix = {"${meta.id}.sorted"}
    }

    withName: BEDTOOLS_MERGE {
        ext.prefix = {"${meta.id}.merged"}
    }

    withName: ANNOTATE_SAMPLES {
        ext.args = {"'{print \$0 \"\\t\" \"${meta.id}\"}'"}
        ext.prefix = {"${meta.id}.annotated"}
    }

    withName: CONCAT_SAMPLES {
        ext.prefix = {"${meta.id}.concatenated"}
    }

    withName: FILTER_MIN_OCCURRENCE {
        ext.args = "'\$NF >= ${params.min_peak_occurrence}'"
    }

    withName: ".*:FOOTPRINTING:BEDTOOLS_MERGE" {
        ext.args = {"-d ${meta.max_peak_gap}"}
        ext.prefix = {"${meta.id}.merged"}
    }

    withName: ".*DYNAMITE:FILTER" {
        ext.args = {"'BEGIN{OFS=\"\\t\"} NR==1 || (\$2 >= ${params.dynamite_min_regression} || \$2 <= -${params.dynamite_min_regression} )'"}
        ext.prefix = {"${meta.id}.filtered"}
        ext.suffix = "tsv"
    }

    withName: "RUN_DYNAMITE" {
        errorStrategy = "ignore"
    }

    withName: ".*RANKING:CREATE_RANKING" {
        publishDir = [
            path: { "${params.outdir}/specific_ranking" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: COMBINE_TFS_PER_ASSAY {
        ext.extension = "tf_ranking.tsv"
    }

    withName: COMBINE_TGS_PER_ASSAY {
        ext.extension = "tg_ranking.tsv"
    }

    withName: ".*:REPORT:CREATE" {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
